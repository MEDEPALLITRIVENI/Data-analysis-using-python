# -*- coding: utf-8 -*-
"""DAY5_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ceuBbT4WOzQncX5Q_Nhn90hDlpRuZ9GS
"""

from sklearn.linear_model import LinearRegression
LR=LinearRegression()

t=[[5],[7],[12],[16],[20]]
m=[40,120,180,210,240]
LR.fit(t,m)

LR.predict([[5.5]])

from matplotlib import pyplot as plt

#plot the data
plt.plot(t,m,color='black')
#plot the linear regression line
y_prad=LR.predict(t)
print(y_prad)
plt.plot(t,y_prad,color='blue',linewidth=3,marker='H')
plt.xlabel('Time')
plt.ylabel('Mass')
plt.title('Linear Regression')
plt.show()

from sklearn.linear_model import LogisticRegression
LR=LogisticRegression()

import numpy as np

# Distance and corresponding probability data
distances = np.array([1,2,5,10,15,20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30,35,40,41,47,50]).reshape(-1, 1)
probabilities = np.array([1,1,1,1,1,1,0.9, 0.85, 0.73, 0.67, 0.5, 0.47, 0.39, 0.31, 0.25, 0.15,0,0,0,0,0])
#convert probabilities to binary levels
threshold=0.5
binary_labels=(probabilities>threshold)
#Create and fit logistic regression model
logr=LogisticRegression()
logr.fit(distances,binary_labels)

p=logr.predict([[20]])
print(p)

if p==[True]:
  print("Goal")
else :
  print("No Goal")

#predict distances between 1 and 50
#Generate distances for prediction
dist=np.linspace(1,50,100).reshape(-1,1)
print(dist) #distance
#make predictions using model
prob=logr.predict_proba(dist) #probaability-predictions
print(prob)



#plot the data
plt.plot(dist,prob,color='blue',label='Logistic Regression')
plt.xlabel('Distance')
plt.ylabel('Probability')
plt.title('Distance vs Probability of scoring a Goal')
plt.legend()
plt.grid(True)
plt.show()

#importing libraries
import pandas as pd
df=pd.read_csv("/content/demodt.txt")
df

#load variables as array
cr=np.array(df['Crime_Rate']).reshape(-1,1)
y=np.array(df['Good'])

#create model
from sklearn.linear_model import LogisticRegression
model=LogisticRegression()

model.fit(cr,y)

c=int(input)

a=model.predict([[45]])
print(a)

if a==[True]:
  print("Good")
else :
  print("bad")

c=int(input("Enter crime rate in your city : "))
pred=model.predict([[c]])
if pred==1:
  print("Good city")
else :
  print("Bad city")