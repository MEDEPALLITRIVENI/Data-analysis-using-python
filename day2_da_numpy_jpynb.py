# -*- coding: utf-8 -*-
"""Day2_DA_Numpy_jpynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IrtverwQVxs5Q0TrQjp7-0NQRVuxcuL-
"""

import numpy as np
#reshape function
ar=np.arange(1,13).reshape(3,4)
print(ar)

#creating a matrix using linespace and reshape
ar=np.linspace(48,58,10).reshape(5,2)
print(ar)

#creating a normal array using reshape function
ar=np.array([12,34,56,12,45,67,83,1125]).reshape(2,2,2)
print(ar)

ar=np.array([12,34,56,12,45,67,83,1125])
ar.resize(2,2,2) #changes the shape of original array
#reshape changes needs saving in another variable
print(ar)

ar=np.array([34,56,78,90])
br=np.array([7,9,3,12]) #list will throw an error while arrays iterate themselves
c=(ar-br)
print(c)

ar=np.array([34,56,78,90])
br=np.array([7,9,3,12]) #list will throw an error while arrays iterate themselves
c=(ar+br)
print(c)

#one on multiplication
ar=np.array([34,56,78,90]).reshape(2,2)
br=np.array([7,9,3,12]).reshape(2,2)
print(ar)
print(br)
c=ar*br #one on multiplication
print(c)

ar=np.array([34,56,78,90]).reshape(2,2)
br=np.array([7,9,3,12]).reshape(2,2)
print(ar)
print("-----------")
print(br)
print("-----------")
c=ar@br #matrix multiplication
print("-----------")
d=ar.dot(br)
print(c)
print("-----------")
print(d)

ar=np.array([12,56,34,51,98,75,63,123,6,80])
print(ar.max()) #min and max only accepts int,float i.e numeric data types
print(ar.min())

ar=np.array([34,56,78,90]).reshape(2,2)
print(ar)
print("----------")
print(ar.max(axis=0)) #axis=0 column
print("-----------")
print(ar.min(axis=0))

ar=np.array([34,56,78,90]).reshape(2,2)
print(ar)
print("----------")
print(ar.max(axis=1)) #axis=1 row
print("-----------")
print(ar.min(axis=1))

#joining two arrays vertically
ar=np.array([34,56,78,90]).reshape(2,2)
br=np.array([7,9,3,12]).reshape(2,2)
print(ar)
print("----------")
print(br)
print("----------")
print("after vertically stacking the array")
print(np.vstack((ar,br)))

#joining two arrays horizontally
ar=np.array([34,56,78,90]).reshape(2,2)
br=np.array([7,9,3,12]).reshape(2,2)
print(ar)
print("----------")
print(br)
print("----------")
print("after horizontally stacking the array")
print(np.hstack((ar,br)))

#joining two arrays horizontally
ar=np.array([34,56,78,90]).reshape(2,2)
br=np.array([7,9,3,12]).reshape(2,2)
print(ar)
print("----------")
print(br)
print("----------")
print("after stacking the array")
print(np.stack((ar,br),axis=0))

a=np.arange(30).reshape(2,3,5)
print(a)
print("After dstack")
print(np.dstack())

#splitting arrays
A=np.arange(18).reshape(6,3)
print(A)
print("After splitting")
print(np.vsplit(A,3)) #equal parts

#splitting arrays
A=np.arange(18).reshape(6,3)
print(A)
print("After splitting")
print(np.vsplit(A,(2,5)))

#splitting arrays FOR Getting the 2,3 lines
A=np.arange(18).reshape(6,3)
print(A)
print("After splitting")
print(np.vsplit(A,(2,3)))

#splitting arrays FOR Getting the 2,3 lines
A=np.arange(18).reshape(3,6)
print(A)
print("After splitting")
np.hsplit(A,3)

#splitting arrays FOR Getting the 2,3 lines
A=np.arange(18).reshape(3,6)
print(A)
print("After splitting")
print(np.hsplit(A,(1,3)))

#returns the position of max element
A=np.array([17,4,18,89,12,33,89,21,34,55,11,13]).reshape(3,4)
print(A)
print(A.argmax(axis=1))  #row
print(A.argmax(axis=0))  #column

#argmin
A=np.array([17,4,18,89,12,33,89,21,34,55,11,13]).reshape(3,4)
print(A)
print(A.argmin(axis=0))
print(A.argmin(axis=1))

#mean,median,std,var
#mean, median,mode,standard deviation,variance
A=np.array([12,34,25,66,71,88])
print("Mean: ",np.mean(A))
print("Median: ",np.median(A))
print("Variance: ",np.var(A))
print("Satndard deviation: ",np.std(A))

"""#TRIGONOMETRY"""

A=np.pi #pi=180
print(A) # radians

np.rad2deg(A)

B=np.array([np.pi/4,np.pi/3,np.pi/2,np.pi])
print(B)

print(np.rad2deg(B))

c=np.array([0,30,45,60,90,120,180])
d=np.deg2rad(c)
print(d)

np.sin(c)

np.cos(c)

np.tan(c)

np.arcsin(1) #sin^-1 #inverse function

np.arctan(1) #tan^-1

a=8
b=6
print(np.hypot(a,b)) #hypotenuse

"""#UNIVERSAL FUNCTIONS"""

#searching of an array
a=np.array([90,3,45,21,34,8,90,21])
print(np.where(a==90))
print(np.where(a==21))
print(np.where(a==45)) #returns the position

a=np.array([90,3,45,21,34,8,90,21])
print(np.where(a>50))

a=np.array([90,3,45,21,34,8,90,21])
print(np.where(a%2==0))

#searchiong an elemt ina sorted array
import numpy as np
a=np.array([4,5,6,12,18])
print(np.searchsorted(a,12))  #outputs the index of a sorted element

a=np.array([6,24,60,12,18])
b=np.array([6,4,10,5,4])
print(np.add(a,b))
print(np.subtract(b,a))
print(np.divide(a,b)) #quotient
print(np.mod(a,b))    #remainder
print(np.divmod(a,b)) #quotient  #remainder

a=np.array([6,24,60,12,18])
print(np.sort(a)) #gives the sorted array

a=np.array([6,24,60,12,18])
print(np.diff(a))

#union of sets
a=np.array([6,24,60,12,18])
b=np.array([6,4,10,5,4])
print(np.union1d(a,b))

#set difference
a=np.array([6,24,60,12,18])
b=np.array([6,4,10,5,4])
print(np.setdiff1d(a,b))

#set intersection
a=np.array([6,24,60,12,18])
b=np.array([6,4,10,5,4])
print(np.intersect1d(a,b))

"""ROUNDING

"""

a1=np.trunc([-3.1666,3.6667]) #floating values
print(a1)

a2=np.fix([-3.1666,3.6667]) #integer values
print(a1)

"""MORE FUNCTIONS"""

a=np.array([6,24,60,12,18])
print(np.cumsum(a))

a=np.array([6,24,60,12,18])
print(np.cumprod(a))

print(np.lcm(34,56))
print(np.gcd(445,655))

ar=np.array([45,65,30])
print(np.lcm.reduce(ar))

ar=np.array([45,65,30])
print(np.gcd.reduce(ar))

a=np.array([[1,2],[3,4]])
print(np.linalg.inv(a))

from numpy import random as rd
a=rd.rand() #default values from 0 to 0.99
print(a)

a=rd.rand(10) #default values from 0 to 0.99
print(a)  ###n

a=rd.randint(4) #random integers between 0 to 4
print(a)

a=rd.randint(50,size=6) #random 6 integers between 0-49 ##limit
print(a)

a=rd.randint(50,size=(2,3)) #limit
print(a)

a=np.array([1,2,3])
b=np.array([4,5,6])
#1*4+2*5+3*6
print(np.inner(a,b))

a=np.array([1,2,3])
b=np.array([4,5,6])
print(np.outer(a,b))

a=np.array([1,2,3])
b=np.array([4,5,6])
print(np.cross(a,b))